{"ast":null,"code":"import _toConsumableArray from\"C:/Users/parky/Desktop/inflearn/EmotionDiary/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Calender=function Calender(_ref){var curDate=_ref.curDate,today=_ref.today,diaryList=_ref.diaryList;var day=[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"];var viewDate={year:curDate.getFullYear(),date:curDate.getDate(),month:curDate.getMonth()+1,day:curDate.toLocaleDateString()};//0을 전달하면 입력한 달의 마지막 날짜를 가져옴\nvar prevLast=new Date(viewDate.year,viewDate.month-1,0);var thisLast=new Date(viewDate.year,viewDate.month,0);var PLDate=prevLast.getDate();//지난달 마지막 날짜\nvar PLDay=prevLast.getDay();//지난달 마지막 요일\nvar TLDate=thisLast.getDate();var TLDay=thisLast.getDay();var prevDates=[];var thisDates=_toConsumableArray(Array(TLDate+1).keys()).slice(1);var nextDates=[];// 달력에 표시될 이전 달 날짜\nif(PLDay!==6){for(var i=0;i<PLDay+1;i++){prevDates.unshift(PLDate-i);}}// 달력에 표시 될 다음 달 날짜\nfor(var _i=1;_i<7-TLDay;_i++){nextDates.push(_i);}var dates=prevDates.concat(thisDates,nextDates);// 이번달 1일의 인덱스 구하기\nvar firstDateIndex=dates.indexOf(1);// 이번달 마지막날 인덱스 구하기\nvar lastDateIndex=dates.lastIndexOf(TLDate);// 오늘의 인덱스 구하기\nvar findToday=\"\";if(viewDate.year===today.getFullYear()&&viewDate.month===today.getMonth()+1){findToday=dates.indexOf(today.getDate());}var days=[];diaryList.map(function(it){days.push({date:new Date(it.date).getDate(),emotion:it.emotion});});console.log(days);var month_dates=[];// 전달,다음달 날짜와 이번달 날짜 구분\ndates.map(function(it,idx){var condition=idx>=firstDateIndex&&idx<lastDateIndex+1?\"this\":\"other\";//오늘 날짜 체크\nvar todayCheck=idx===findToday?\"today\":\"\";var diary_index=-1;if(idx>=firstDateIndex&&idx<lastDateIndex+1){diary_index=days.findIndex(function(day){return day.date===it;});}month_dates[idx]=/*#__PURE__*/_jsxs(\"div\",{className:[\"date\"+\" \"+todayCheck],children:[/*#__PURE__*/_jsx(\"span\",{className:condition,children:it}),diary_index>-1&&/*#__PURE__*/_jsx(\"img\",{className:\"CalenderEmotion\",src:process.env.PUBLIC_URL+\"assets/emotion\".concat(days[diary_index].emotion,\".png\")})]});});return/*#__PURE__*/_jsxs(\"div\",{className:\"calender\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"days\",children:day.map(function(it){return/*#__PURE__*/_jsx(\"div\",{className:\"day\",children:it});})}),/*#__PURE__*/_jsx(\"div\",{className:\"dates\",children:month_dates.map(function(it){return/*#__PURE__*/_jsx(_Fragment,{children:it});})})]});};Calender.defaultProps={diaryList:[]};export default Calender;","map":{"version":3,"names":["React","useEffect","useState","Calender","curDate","today","diaryList","day","viewDate","year","getFullYear","date","getDate","month","getMonth","toLocaleDateString","prevLast","Date","thisLast","PLDate","PLDay","getDay","TLDate","TLDay","prevDates","thisDates","Array","keys","slice","nextDates","i","unshift","push","dates","concat","firstDateIndex","indexOf","lastDateIndex","lastIndexOf","findToday","days","map","it","emotion","console","log","month_dates","idx","condition","todayCheck","diary_index","findIndex","process","env","PUBLIC_URL","defaultProps"],"sources":["C:/Users/parky/Desktop/inflearn/EmotionDiary/src/components/Calender.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Calender = ({ curDate, today, diaryList }) => {\r\n  const day = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n  const viewDate = {\r\n    year: curDate.getFullYear(),\r\n    date: curDate.getDate(),\r\n    month: curDate.getMonth() + 1,\r\n    day: curDate.toLocaleDateString(),\r\n  };\r\n\r\n  //0을 전달하면 입력한 달의 마지막 날짜를 가져옴\r\n  const prevLast = new Date(viewDate.year, viewDate.month - 1, 0);\r\n  const thisLast = new Date(viewDate.year, viewDate.month, 0);\r\n\r\n  const PLDate = prevLast.getDate(); //지난달 마지막 날짜\r\n  const PLDay = prevLast.getDay(); //지난달 마지막 요일\r\n\r\n  const TLDate = thisLast.getDate();\r\n  const TLDay = thisLast.getDay();\r\n\r\n  const prevDates = [];\r\n  const thisDates = [...Array(TLDate + 1).keys()].slice(1);\r\n  const nextDates = [];\r\n\r\n  // 달력에 표시될 이전 달 날짜\r\n  if (PLDay !== 6) {\r\n    for (let i = 0; i < PLDay + 1; i++) {\r\n      prevDates.unshift(PLDate - i);\r\n    }\r\n  }\r\n\r\n  // 달력에 표시 될 다음 달 날짜\r\n  for (let i = 1; i < 7 - TLDay; i++) {\r\n    nextDates.push(i);\r\n  }\r\n\r\n  const dates = prevDates.concat(thisDates, nextDates);\r\n\r\n  // 이번달 1일의 인덱스 구하기\r\n  const firstDateIndex = dates.indexOf(1);\r\n  // 이번달 마지막날 인덱스 구하기\r\n  const lastDateIndex = dates.lastIndexOf(TLDate);\r\n\r\n  // 오늘의 인덱스 구하기\r\n  let findToday = \"\";\r\n  if (\r\n    viewDate.year === today.getFullYear() &&\r\n    viewDate.month === today.getMonth() + 1\r\n  ) {\r\n    findToday = dates.indexOf(today.getDate());\r\n  }\r\n\r\n  const days = [];\r\n  diaryList.map((it) => {\r\n    days.push({\r\n      date: new Date(it.date).getDate(),\r\n      emotion: it.emotion,\r\n    });\r\n  });\r\n  console.log(days);\r\n  const month_dates = [];\r\n\r\n  // 전달,다음달 날짜와 이번달 날짜 구분\r\n  dates.map((it, idx) => {\r\n    const condition =\r\n      idx >= firstDateIndex && idx < lastDateIndex + 1 ? \"this\" : \"other\";\r\n\r\n    //오늘 날짜 체크\r\n    const todayCheck = idx === findToday ? \"today\" : \"\";\r\n\r\n    let diary_index = -1;\r\n\r\n    if (idx >= firstDateIndex && idx < lastDateIndex + 1) {\r\n      diary_index = days.findIndex((day) => day.date === it);\r\n    }\r\n\r\n    month_dates[idx] = (\r\n      <div className={[\"date\" + \" \" + todayCheck]}>\r\n        <span className={condition}>{it}</span>\r\n        {diary_index > -1 && (\r\n          <img\r\n            className=\"CalenderEmotion\"\r\n            src={\r\n              process.env.PUBLIC_URL +\r\n              `assets/emotion${days[diary_index].emotion}.png`\r\n            }\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"calender\">\r\n      <div className=\"days\">\r\n        {day.map((it) => (\r\n          <div className=\"day\">{it}</div>\r\n        ))}\r\n      </div>\r\n      <div className=\"dates\">\r\n        {month_dates.map((it) => (\r\n          <>{it}</>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCalender.defaultProps = {\r\n  diaryList: [],\r\n};\r\n\r\nexport default Calender;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}