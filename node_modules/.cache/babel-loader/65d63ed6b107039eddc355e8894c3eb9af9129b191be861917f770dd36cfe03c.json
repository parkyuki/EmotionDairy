{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parky\\\\Desktop\\\\inflearn\\\\EmotionDiary\\\\src\\\\components\\\\Calender.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Calender = _ref => {\n  let {\n    curDate\n  } = _ref;\n  const day = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\n  const viewDate = {\n    year: curDate.getFullYear(),\n    date: curDate.getDate(),\n    month: curDate.getMonth() + 1,\n    day: curDate.toLocaleDateString()\n  };\n\n  //0을 전달하면 입력한 달의 마지막 날짜를 가져옴\n  const prevLast = new Date(viewDate.year, viewDate.month - 1, 0);\n  const thisLast = new Date(viewDate.year, viewDate.month, 0);\n  const PLDate = prevLast.getDate(); //지난달 마지막 날짜\n  const PLDay = prevLast.getDay(); //지난달 마지막 요일\n\n  const TLDate = thisLast.getDate();\n  const TLDay = thisLast.getDay();\n  const prevDates = [];\n  const thisDates = [...Array(TLDate + 1).keys()].slice(1);\n  const nextDates = [];\n\n  // 달력에 표시될 이전 달 날짜\n  if (PLDay !== 6) {\n    for (let i = 0; i < PLDay + 1; i++) {\n      prevDates.unshift(PLDate - i);\n    }\n  }\n\n  // 달력에 표시 될 다음 달 날짜\n  for (let i = 1; i < 7 - TLDay; i++) {\n    nextDates.push(i);\n  }\n  const dates = prevDates.concat(thisDates, nextDates);\n\n  // 이번달 1일의 인덱스 구하기\n  const firstDateIndex = dates.indexOf(1);\n  // 이번달 마지막날 인덱스 구하기\n  const lastDateIndex = dates.lastIndexOf(TLDate);\n  const today = new Date();\n  const findToday = 12;\n\n  // if (\n  //   viewDate.year === today.getFullYear &&\n  //   viewDate.month === today.getMonth\n  // ) {\n  //   return setfindToday(dates.indexOf(today.getDate()));\n  // }\n\n  console.log(findToday);\n  // 전달,다음달 날짜와 이번달 날짜 구분\n  dates.map((it, idx) => {\n    const condition = idx >= firstDateIndex && idx < lastDateIndex + 1 ? \"this\" : \"other\";\n    const todayCheck = idx === findToday ? \"today\" : \"\";\n    dates[idx] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: [condition, todayCheck],\n        children: it\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  });\n  const goToday = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calender\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: goToday,\n      children: \"\\uC624\\uB298\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days\",\n      children: day.map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day\",\n        children: it\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dates\",\n      children: dates.map(it => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: it\n      }, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_c = Calender;\nexport default Calender;\nvar _c;\n$RefreshReg$(_c, \"Calender\");","map":{"version":3,"names":["React","useState","Calender","curDate","day","viewDate","year","getFullYear","date","getDate","month","getMonth","toLocaleDateString","prevLast","Date","thisLast","PLDate","PLDay","getDay","TLDate","TLDay","prevDates","thisDates","Array","keys","slice","nextDates","i","unshift","push","dates","concat","firstDateIndex","indexOf","lastDateIndex","lastIndexOf","today","findToday","console","log","map","it","idx","condition","todayCheck","goToday"],"sources":["C:/Users/parky/Desktop/inflearn/EmotionDiary/src/components/Calender.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Calender = ({ curDate }) => {\r\n  const day = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n  const viewDate = {\r\n    year: curDate.getFullYear(),\r\n    date: curDate.getDate(),\r\n    month: curDate.getMonth() + 1,\r\n    day: curDate.toLocaleDateString(),\r\n  };\r\n\r\n  //0을 전달하면 입력한 달의 마지막 날짜를 가져옴\r\n  const prevLast = new Date(viewDate.year, viewDate.month - 1, 0);\r\n  const thisLast = new Date(viewDate.year, viewDate.month, 0);\r\n\r\n  const PLDate = prevLast.getDate(); //지난달 마지막 날짜\r\n  const PLDay = prevLast.getDay(); //지난달 마지막 요일\r\n\r\n  const TLDate = thisLast.getDate();\r\n  const TLDay = thisLast.getDay();\r\n\r\n  const prevDates = [];\r\n  const thisDates = [...Array(TLDate + 1).keys()].slice(1);\r\n  const nextDates = [];\r\n\r\n  // 달력에 표시될 이전 달 날짜\r\n  if (PLDay !== 6) {\r\n    for (let i = 0; i < PLDay + 1; i++) {\r\n      prevDates.unshift(PLDate - i);\r\n    }\r\n  }\r\n\r\n  // 달력에 표시 될 다음 달 날짜\r\n  for (let i = 1; i < 7 - TLDay; i++) {\r\n    nextDates.push(i);\r\n  }\r\n\r\n  const dates = prevDates.concat(thisDates, nextDates);\r\n\r\n  // 이번달 1일의 인덱스 구하기\r\n  const firstDateIndex = dates.indexOf(1);\r\n  // 이번달 마지막날 인덱스 구하기\r\n  const lastDateIndex = dates.lastIndexOf(TLDate);\r\n\r\n  const today = new Date();\r\n  const findToday = 12;\r\n\r\n  // if (\r\n  //   viewDate.year === today.getFullYear &&\r\n  //   viewDate.month === today.getMonth\r\n  // ) {\r\n  //   return setfindToday(dates.indexOf(today.getDate()));\r\n  // }\r\n\r\n  console.log(findToday);\r\n  // 전달,다음달 날짜와 이번달 날짜 구분\r\n  dates.map((it, idx) => {\r\n    const condition =\r\n      idx >= firstDateIndex && idx < lastDateIndex + 1 ? \"this\" : \"other\";\r\n\r\n    const todayCheck = idx === findToday ? \"today\" : \"\";\r\n\r\n    dates[idx] = (\r\n      <div className=\"date\">\r\n        <span className={[condition, todayCheck]}>{it}</span>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const goToday = () => {};\r\n\r\n  return (\r\n    <div className=\"calender\">\r\n      <button className=\"btn\" onClick={goToday}>\r\n        오늘\r\n      </button>\r\n      <div className=\"days\">\r\n        {day.map((it) => (\r\n          <div className=\"day\">{it}</div>\r\n        ))}\r\n      </div>\r\n      <div className=\"dates\">\r\n        {dates.map((it) => (\r\n          <>{it}</>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calender;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}